
% 2014.08.13 lia -- Updated function names, some documentation details
%      08.22 lia -- Changing function names, warmabs -> xstar for now
%      10.27 lia -- Major updates

% 2014.07.30 dph
%
% update draft ewout user function interface specifications.
%   rename "wadb" for "warmabs database"
%
%
%  some prototype functions can be found in scripts/ewout_util.sl
%    ( rooted at ~dph/h3/Analysis/ADP_2010_atomic_data/ )

% NOTE: there is no explicit atomic database access, but only implicit
% 	access to atomic data after a model evaluation.  Hence it is
% 	not clear whether particular feature values will be available
% 	after any individual model evaluation.

----------------------------------------------------------------------

Background:

The xspec library models implementing the xstar model suites can
optionally write their atomic and model data to a FITS table.  Reading
this table will allow searching for model features by type, strength,
wavelength, or element/ion, for example.

The atomic database can be written during model evaluation by setting
appropriate parameters in the xstar model suite through the xspec
models' parameter interfaces.  These models are called:

  warmabs
  photemis
  hotabs
  hotems
  multabs
  windabs

The first two are the most important, and the most commonly used.

The model parameters are:

   write_outfile   if 1, write the FITS table of model and atomic data.
   outfile_idx     append this integer to the default file.

   The default filename is warmabs_1.fits, in the working
   directory. This can be changed to any arbitrary file by setting an
   environment variable, WARMABS_OUTFILE.

--------------------------------------------------------------------


Function requirements:


Define new functions with an auto-naming feature:

  warmabs2
  photemis2
  hotabs2
  hotemis2
  multabs2
  windabs2
  scatemis2

  Introduce a parameter, autoname_outfile, which if it has the value
  1, will use the model name and instance to name the output FITS
  table.  E.g.,

    fit_fun( "Powerlaw(1) * warmabs2(1) + photemis2(123)"  );
    set_par( "warmabs2(1).write_outfile",  1 );
    set_par( "photemis2(123).write_outfile",  1 );
    set_par( "*.autoname_outfile", 1 );

  will produce output files called:

    warmabs_1.fits
    photemis_123.fits

  [implemented in warmabs_utils.sl]

---

%% HELP - Not sure if I documented these corectly -- lia

Some output controls:

xstar_set_outfile(f)
    Sets the name of the warmabs file
    Use f="" t disable use of the WARMABS_OUTFILE

xstar_get_outfile()
    Returns the name of current WARMABS_OUTFILE

xstar_unset_outfile
    Returns to default

---

s = rd_xstar_output( db_filename );

  Read the warmabs output table;
  Returns a structure, containing fields sorted by ascending wavelength
    transition  : (int) an index for the transition
    type        : (string) "line" or "edge/rrc"
    ion	    	: (string) describing ion, e.g. "si_iv"
    wavelength  : (double) transition wavelength in Angs
    tau0	: (float) optical depth of the transition (??)
    tau0grid    : (float) optical depth of the transition (??)
    ew	   	: (float) equivalent width of a line transition,
   		  has a negative value in the case of emission
    luminosity  : (float) luminosity of a line transition
    lower_level : (string) lower level of transition
    upper_level : (string) upper level of transition
    a_ij	: (float) A_ij rate coefficient
    f_ij	: (float) f_ij rate coefficient
    g_lo	: (float) g value for lower level of transition
    g_up	: (float) g value for upper level of transition
    ind_lo	: (int) index for transition lower level, 
		  see xstarlevels.text
    ind_up	: (int) index for transition upper level,
		  see xstarlevels.text
    ind_ion	: (int) index for ion

  fields added to the basic output:
    model_name  : (string) "warmabs" or "photemis", etc...
    Z	        : (int) atomic number; e.g., Ne = 10
    q	        : (int) ion state (arabic; e.g., 9 for IX)
    params	: sub-structure holding model parameters
    transition_name : (string) description of other fields 
		      "<Element> <ion> <upper_level> <lower_level> <type>"
    filename	    : (string) name of file(s) the database was read from

  merged databases only (see xstar_merge)
    origin_file     : (int) index of s.filename from which transition was read

		      
---

bool_array = xstar_wl( s, wlo, whi[; redshift] );

  Return boolean array of characters for transitions in s matching

         wlo < s.wavelength*(1+redshift) <= whi

  where wavelength is in units of angstroms.

  Qualifiers:
    redshift : = 0.0 by default


bool_array = xstar_el_ion( s, el_list[, ion_list] )

  Return boolean array of characters for transitions in s matching

	ismember( s.Z, el_list ) and
	ismember( s.q, ion_list )

  where Z is an array of integers specifying atomic number (e.g. 6 for oxygen)
  and q is an array of integers specifying charge (e.g. 1 for neutral)

  Examples:
    o_all = where( xstar_el_ion( s, 8 ) );
    o_vii = where( xstar_el_ion( s, 8, 7 ) );


bool_array = xstar_trans( s, el_list, ion_list[, lower_list[, upper_list]] );

  Return boolean array of characters for transitions in s matching
  
        xstar_el_ion( s, el_list, ion_list ) and
	ismember( s.ind_lo, lower_list ) and
	ismember( s.ind_up, upper_list )

  Examples:
    o_vii_triplet = where( xstar_trans( s, 8, 7, 1, [2:7] ) );

---

indices = xstar_strong( n, s [; type, wmin, wmax, elem, ion, redshift] );

  Return the indices in warmabs_db structure s for the n strongest
  features.  Depending on the feature type, "strongest" can mean the
  most negative (e.g., emission equivalent widths) or the most positive
  (e.g., line luminosity or optical depth).

  The features may be specified by qualifiers.  Defaults are
  determined from the model type (defined by s.model_name) as:

  Qualifiers:

    field  : arbitrary field name of the input structure field
     	     defining the feature for the selection of the strongest
     	     elements. The user can override this.
	     
	     = "ew" (equivalent width) if model_type == T_HOTABS or T_WARMABS
	     = "luminosity" (line luminosity) if model_type == T_HOTEMIS or T_PHOTEMIS

	     If model_type is not found, field="ew" is the default setting

	     Values also change according to type qualifier:
	     = "luminosity" if type == "rrc"
	     = "tau0" if type == "edge"

	     If field is set by user, it will override all conditionals above

     type  : "line" | "edge" | "rrc" | "any"
	    
	     "any" will match all types with default field as described above.
	     "edge" and "rrc" will change the field parameter

     wmin  : minimum wavelength [A] for selection.

     wmax  : maximum wavelength [A] for selection

     elem  : Element atomic number (integer); output will be limited to this element.

     ion   : Ion state (integer); output will be limited to this ion.

     limit : Lower limit for the field of interest. Only transitions
     	     with s.field >= limit will be returned.

     redshift : Will adjust search to wmin < s.wavelength * (1+redshift) <= wmax

  Examples:

    fit_fun( "warmabs2(1)" );
    set_par( "warmabs2(1).rlogxi", 1 );
    set_par( "warmabs2(1).write_outfile", 1 );
    (w1, w2) = linear_grid( 1.0, 40.0, 8192 );
    y = eval_fun( w1, w2 );

    s = rd_xstar_output( "warmabs_1.fits" ) ;
    l = xstar_strong( 10, s; elem=O, wmin=10, wmax=20, type="edge" ) ; 

    xstar_page_group( s, l );
    #     id       ion   lambda    A[s^-1]          f  gl  gu      tau_0       W(A) L[10^38 cgs]       type                    label
        3543   O  VIII  14.2281  0.000e+00  0.000e+00   2   0  2.317e-01  0.000e+00    0.000e+00   edge/rrc   1s1.2S_1/2 -     continuu
        3363   O   VII  16.7705  0.000e+00  0.000e+00   1   0  1.261e+00  0.000e+00    0.000e+00   edge/rrc     1s2.1S_0 -    continuum


---

xstar_page_group( s, l[; sort, redshift] );

  Print a table of features of s selected by indices l

  Qualifiers:
    sort : "wavelength" | "tau0" | "none" | field name

	   Will sort the list in descending order based on the field
	   name value in these fields, except in a few special cases:
    	   = "wavelength" by default, sorts in ascending order
	   = "none" will print the data in the same order as l
	   = "tau0" sorts according to tau0grid field in s

    redshift : Will print the observer-frame wavelengths in the table.
               In the case of a merged database, the user should
               supply an array containing the redshift for each origin
               file, in the same order as s.filename
	       (see xstar_merge and rd_xstar_output)


xstar_plot_group( s, l[, color[, style[, redshift]]] );

  mark features in s selected by l on the current plot.

  Qualifiers:
    color    : optional integer specifying label color
   	       default = 2

    style    : optional structure giving labeling attributes 
   	       default = line_label_default_style()

    redshift : redshift for marker placement
   	       default = 0

---
---

Functions for handling multiple databases
---

s = xstar_merge( file_list );

  Merges two or more databases from an array of file names.
  The resulting database structure includes an additional field
    origin_file : (int) index of s.filename from which transition was read

  (see rd_xstar_output for other fields)


xstar_run_model_grid( model_info, root_dir[; nstart] );

  Runs a series of xstar models set by the model_info structure.
  All output is stored in the location specified by root_dir.

  model_info is a structure containing the fields:
    mname   : model name, e.g., "warmabs" or "photemis"
    pname   : parameter of interest to vary, e.g., "column"
    min	    : minimal value for parameter of interest
    max	    : maximal value for parameter of interest
    step    : step-size for parameter of interest
    bins    : a sub-structure containing
      bin_lo
      bin_hi

  Two global variables are provided to help initialize model_info
    _default_model_info : initializes structure with the above fields
    _default_binning    : (bin_lo, bin_hi) = linear_grid(1.0, 40.0, 8192);


g = xstar_load_tables( fnames );

  Loads a series of xstar models, defined by sorted array of strings
  containing the database file names (fnames).

  Output is a grid structure containing the following fields:
   db        : An array of database structures loaded from each file
   	       (See results of rd_xstar_output)
	       Each structure in db contains an additional field

     uid : (long int) the "unique id" assigned to each transition
     according to ion index, ind_lo, and ind_hi
     (see xstarlevels.text)

   mdb : The "master database" sub-structure containing the union set
   	 of all transitions in db array.
    type        : (string) "line" or "edge/rrc"
    ion	    	: (string) describing ion, e.g. "si_iv"
    wavelength  : (double) transition wavelength in Angs
    lower_level : (string) lower level of transition
    upper_level : (string) upper level of transition
    Z	        : (int) atomic number; e.g., Ne = 10
    q	        : (int) ion state (arabic; e.g., 9 for IX)
    a_ij	: (float) A_ij rate coefficient
    f_ij	: (float) f_ij rate coefficient
    g_lo	: (float) g value for lower level of transition
    g_up	: (float) g value for upper level of transition
    ind_lo	: (int) index for transition lower level, 
		  see xstarlevels.text
    ind_up	: (int) index for transition upper level,
		  see xstarlevels.text
    ind_ion	: (int) index for ion
    transition_name : (string) description of other fields 
		      "<Element> <ion> <upper_level> <lower_level> <type>"

   uids      : (long int) Union of all uid values in db array
   uid_flags : An array of character arrays containing boolean information.
   	       length(g.uid_flags)    = length(g.db)
   	       length(g.uid_flags[i]) = length(g.uids)
               g.uid_flags[i][j] = '1' if g.uids[j] is in g.db[i]

   par	    : A sub-structure contaiing parameters of typical interest to users
     rlogxi : (double) 
     column : (double)
     vturbi : (double)


xstar_page_grid( g, l );

  Print a table of transitions in g (a grid of xstar models) 
  selected by indices l

  Qualifiers:
    sort : "wavelength" | "none" | "uid" | field name

	   Will sort the list in descending order based on the field
	   name value in these fields, except in a few special cases:
    	   = "wavelength" by default, sorts in ascending order
	   = "none" will print the data in the same order as l
	   = "uid" will print the data in order of ascending uid,
	     this is the equivalent of ascending ion species


(ion, lo, up) = xstar_unpack_uid( uid );

  Returns the index values for ion (ind_ion), lower level (ind_lo),
  and upper level (ind_up) associated with a unique id.


xstar_line_prop( g, l, field );

  Returns an array containing the values of "field" for the transition
  of interest over the grid of models.

  Inputs:
    g     : grid structure containing all model databases (see xstar_load_tables)
    l     : (int) index for the transition in the master databas (g.mdb)
    field : (string) name the database field of interest, e.g. "ew"

  Example:

    fgrid = glob("wamrbas_*.fits");
    fgrid = fgrid[ array_sort(fgrid) ];
    wa_grid = xstar_load_tables(fgrid);

    line_ew = xstar_line_prop( wa_grid, 980040015L, "ew" );

---
---

Function wish list
---

index = xstar_db_index( s, id_list );

  return indices acoording to transition or unique id in a database or
  grid structure


Something that deals with line blending
-- For plotting?
-- For finding line features?

